generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id   Int    @id @default(autoincrement())
  name String @unique
  users User[]
}

enum ResponseStatus {
  NOT_RESOLVED
  PROCCESS
  SOLVED
}

model User {
  id        Int      @id @default(autoincrement())
  login     String   @unique
  password  String
  refreshToken String?
  roleId    Int
  role      Role     @relation(fields: [roleId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 
  news      News[] // Связь с создаваемыми новостями
  documents Document[] // Связь с создаваемыми документами
  vacancies Vacancy[] // Связь с создаваемыми вакансиями
  projects  Project[] // Связь с создаваемыми проектами
}

// Диаграмма со статистикой

model Statistics {
  id               Int      @id @default(autoincrement())
  subject          String
  pointFpsr        String
  indicatorName    String
  indicatorValue   Float?   // для числовых значений
  indicatorValueString String? // для строковых значений вроде "7,530420906"
  period           String
  createdAt        DateTime @default(now())
}
// Новости
model News {
  id        Int      @id @default(autoincrement())
  title     String
  body      String
  imageUrl  String?
  createdAt DateTime @default(now())
  userId    Int? 
  user      User?    @relation(fields: [userId], references: [id])
}
// Вакансии
model Vacancy{
  id Int @id @default(autoincrement())
  title String
  description String
  address String
  salary Int
  experience String?
  userId Int?
  user User? @relation(fields: [userId], references: [id])

}
// Отлики на вакансии
model JobResponse{
  id Int @id @default(autoincrement())
  fullName String
  phoneNumber String
  email String
  status ResponseStatus @default(NOT_RESOLVED)
}

// Вызовы эвакуатора
model TowTruckResponse{
  id Int @id @default(autoincrement())
  fullName String
  phoneNumber String
  email String
  carType String
  address String
  status ResponseStatus @default(NOT_RESOLVED)
} 
// Заявка на разработку документов
model DocumentationDevelopmentResponse{
  id Int @id @default(autoincrement())
  fullName String
  phoneNumber String
  email String
  status ResponseStatus @default(NOT_RESOLVED)
}
// Заявка на аренду автовышки
model BoomLiftRentalResponse{
  id Int @id @default(autoincrement())
  fullName String
  phoneNumber String
  email String
  status ResponseStatus @default(NOT_RESOLVED)
}

// Документы
model Document {
  id          Int      @id @default(autoincrement())
  title       String
  fileUrl     String
  description String
  categoryId Int
  category Category @relation(fields: [categoryId], references: [id])
  createdAt   DateTime @default(now())
  userId      Int? 
  user        User?    @relation(fields: [userId], references: [id])
}
// Категории для документов
model Category{
  id Int @id @default(autoincrement())
  name String @unique

  Document Document[]
}



model Project {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  status      String 
  startDate   DateTime
  endDate     DateTime?
  imageUrl    String?
  createdAt   DateTime @default(now())
  userId      Int? 
  user        User?    @relation(fields: [userId], references: [id])
}

