import { Injectable, OnApplicationBootstrap } from '@nestjs/common';
import { Telegraf } from 'telegraf';

@Injectable()
export class TelegramBotService implements OnApplicationBootstrap {
  private bot: Telegraf | null = null;
  private isReady = false;
  private pendingMessages: Array<{
    jobData: any;
    resolve: (value: boolean) => void;
    reject: (reason?: any) => void;
  }> = [];

  async onApplicationBootstrap() {
    await this.initializeBot();
  }

  private async initializeBot() {
    const token = process.env.TELEGRAM_BOT_TOKEN;
    const chatId = process.env.TELEGRAM_CHAT_ID;

    if (!token || !chatId) {
      console.warn('Telegram credentials not set, using stub mode');
      return;
    }

    try {
      console.log('Initializing Telegram bot...');
      this.bot = new Telegraf(token);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram API
      await this.bot.telegram.getMe();

      // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
      this.bot
        .launch()
        .then(() => {
          console.log('‚úÖ Telegram bot started successfully');
          this.isReady = true;

          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–∂–∏–¥–∞—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
          this.processPendingMessages();
        })
        .catch((error) => {
          console.error('‚ùå Telegram bot failed to start:', error);
          // –û—Ç–∫–ª–æ–Ω—è–µ–º –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
          this.rejectPendingMessages(error);
        });
    } catch (error) {
      console.error('Telegram bot initialization error:', error);
    }
  }

  private processPendingMessages() {
    this.pendingMessages.forEach(({ jobData, resolve }) => {
      this.sendMessageInternal(jobData).then(resolve);
    });
    this.pendingMessages = [];
  }

  private rejectPendingMessages(error: any) {
    this.pendingMessages.forEach(({ reject }) => {
      reject(error);
    });
    this.pendingMessages = [];
  }

  async sendJobResponseNotification(jobData: {
    fullName: string;
    phoneNumber: string;
    email: string;
    id?: number;
  }): Promise<boolean> {
    // –ï—Å–ª–∏ –±–æ—Ç –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å
    if (!this.isReady || !this.bot) {
      console.log('‚è≥ Telegram bot not ready, queuing message...');

      return new Promise((resolve, reject) => {
        this.pendingMessages.push({ jobData, resolve, reject });

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ (30 —Å–µ–∫—É–Ω–¥)
        setTimeout(() => {
          if (!this.isReady) {
            console.log('üì® Telegram bot timeout, logging instead:', jobData);
            resolve(true); // –í—Å–µ —Ä–∞–≤–Ω–æ —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º, –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º
          }
        }, 30000);
      });
    }

    return this.sendMessageInternal(jobData);
  }

  private async sendMessageInternal(jobData: {
    fullName: string;
    phoneNumber: string;
    email: string;
    id?: number;
  }): Promise<boolean> {
    try {
      const message = `
üéØ *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é*

üìù *ID:* ${jobData.id || '–ù–æ–≤—ã–π'}
üë§ *–§–ò–û:* ${jobData.fullName}
üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* ${jobData.phoneNumber}
üìß *Email:* ${jobData.email}
‚è∞ *–í—Ä–µ–º—è:* ${new Date().toLocaleString('ru-RU')}
      `;

      await this.bot!.telegram.sendMessage(
        process.env.TELEGRAM_CHAT_ID!,
        message,
        {
          parse_mode: 'Markdown',
        },
      );

      console.log('‚úÖ Notification sent to Telegram');
      return true;
    } catch (error) {
      console.error('‚ùå Error sending to Telegram:', error);
      // –ü—Ä–∏ –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–æ–∂–µ –ª–æ–≥–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
      console.log('üì® Fallback logging:', jobData);
      return true; // –í—Å–µ —Ä–∞–≤–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true, —Ç–∞–∫ –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
    }
  }

  async onModuleDestroy() {
    if (this.bot) {
      this.bot.stop();
    }
  }
}
